test_case_name = test1
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
#workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )
#workload[2] = put('jedi,'luke skywalker); slice('jedis','0:4')
#workload[0] = put('movie','star')
#append('movie','stars'); get('movie')
failures[0,1] = shuttle(0,1), drop_result_stmt()
#failures[1,2] = result_shuttle(0,1),change_result(); shuttle(1,3), change_operation()

-------------------------t = 1, client = 1, failure = 0 ----------------------------------------

test_case_name = test_1
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. 
Dict States: 1. { 'movie': ['star'] }
Result: OK


test_case_name = test_2
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is empty string because key doesn't exist.
Dict States: {} , Result: ''


test_case_name = test_3
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict State: {}  , Result: fail



test_case_name = test_4
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict State: {}  Results: fail


test_case_name = test_t1c1f0_5
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');  get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle.
Dict: 'movie': ['star'] , Results: OK, ['star']


test_case_name = test_t1c1f0_6
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie',' wars')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle.
Dict: 'movie': ['star', 'star wars'] , Result: OK, OK


test_case_name = test_t1c1f0_7
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','World wars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. .
Dict: 'movie': ['orl'] , Result: OK, OK


test_case_name = test_t1c1f0_8
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie',' wars'); get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle.
Dict: 'movie': ['star wars'] , Result: OK, OK, ['star wars']


test_case_name = test_t1c1f0_9
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie',' wars'); slice('movie','8:10')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. 3rd Result is fail because index out of range
Dict: 'movie': ['star wars'] , Result: OK, OK, fail


test_case_name = test_t1c1f0_10
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Both results fail because key doesnt exist
Dict: {} , Result: fail, fail

-------------------------t = 2, client = 1, failure = 0 ----------------------------------------

test_case_name = test_t2c1f0_1
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 5 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t2c1f0_2
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = get('movie')

Description: 1 client, 5 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c1f0_3
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','stars')

Description: 1 client, 5 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t2c1f0_4
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = slice('movie','0:4')

Description: 1 client, 5 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c1f0_5
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');  get('movie')

Description: 1 client, 5 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']


test_case_name = test_t2c1f0_6
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 5 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c1f0_7
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 5 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c1f0_8
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 5 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c1f0_9
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 5 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c1f0_10
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 5 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK


-------------------------t = 1, client = 2, failure = 0 ----------------------------------------


test_case_name = test_t1c2f0_1
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict: { 'movie' : ['star'] } , client 0 Result: OK client 1 Result: OK


test_case_name = test_t1c2f0_2
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result depends on which client executes first.
Dict: { 'movie' : ['star'] } , client 0 Result: OK , client 1 Result: OK     sequence: client 0, client 1      (or)
Dict: { 'movie' : ['star'] } , client 0 Result: OK , client 1 Result: ''     sequence: client 1, client 0


test_case_name = test_t1c2f0_3
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result depends on which client executes first.
Dict: { 'movie' : ['star'] } ,           client 0 Result: OK , client 1 Result: fail    sequence: client 1, client 0  (or)
Dict: { 'movie' : ['star' , 'stars'] } , client 0 Result: OK , client 1 Result: OK		sequence: client 0, client 1


test_case_name = test_t1c2f0_4
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result depends on which client executes first.
Dict: { 'movie' : ['star'] } ,           client 0 Result: OK , client 1 Result: fail, OK      sequence: client 1, client 0, client 1.  (or)
Dict: { 'movie' : ['star' , 'stars'] } , client 0 Result: OK , client 1 Result: OK , OK 	  sequence: client 0, client 1, client 1   (or)
Dict: { 'movie' : ['star'] } , client 0 Result: OK , client 1 Result: fail , fail   sequence: all workloads of client 1 first 


test_case_name = test_t1c2f0_5
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 2 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']

****************************************************************************
test_case_name = test_t1c2f0_6
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 2 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t1c2f0_7
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 2 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t1c2f0_8
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 2 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t1c2f0_9
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 2 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t1c2f0_10
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 2 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK

***************************************************


-------------------------t = 2, client = 2, failure = 0 ----------------------------------------




test_case_name = test_t2c2f0_1
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 1 client, 3 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t2c2f0_2
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = get('movie')

Description: 1 client, 3 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f0_3
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t2c2f0_4
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f0_5
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 1 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']


***************************************************

test_case_name = test_t2c2f0_6
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c2f0_7
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c2f0_8
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c2f0_9
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c2f0_10
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK

***************************************************

-------------------------t = 1, client = 2, failure = 1 ----------------------------------------




test_case_name = test_t1c2f1_1
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars')
failures[0,0] = client_request(0,0), change_operation()

Description: 1 client, 3 replicas. Clients send operations. When Head receives operation client_request(0,0) it modifies forward shuttle and sends it. Replica:1 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. If client 0 sends before client 1, then replica:1 doesn't accept any more requests from any client because slots would not be continuous. Both clients would retransmit request and time-out and then send reconfiguration request to olympus



test_case_name = test_t1c2f1_2
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars'); get('movie')
failures[0,1] = shuttle(0,0), change_operation()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. Both clients would retransmit request and time-out and then send reconfiguration request to olympus


test_case_name = test_t1c2f1_3
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,2] = shuttle(0,0), change_result()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. Both clients would retransmit request and time-out and then send reconfiguration request to olympus


test_case_name = test_t2c2f1_4
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f1_5
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 1 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']

***************************************************

test_case_name = test_t2c2f1_6
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c2f1_7
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c2f1_8
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c2f1_9
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c2f1_10
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK


***************************************************