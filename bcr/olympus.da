import sys
config(channel is fifo, clock is lamport)
from enum import Enum
import nacl.encoding
import nacl.signing
from OrderProof import OrderProof
from OrderStatement import OrderStatement
from Crypto import Crypto
from State import State
from Validations import Validations
from ResultProof import ResultProof
from ResultStatement import ResultStatement
from Shuttle import Shuttle
from ReplicaHistory import ReplicaHistory
from  ReconfigurationRequestObject import ReconfigurationRequestObject
from configread import configread
import pickle
import time
str_exp = ','
log_level = 20
cl = import_da('client')
rl = import_da('replica')


class Olympus(process):

	def setup(nReplicas: int, clients: cl.Client, olympusPrivate: nacl.signing.SigningKey, olympusPublic: nacl.signing.SigningKey, clientPublic: list, failures: dict, nonhead_timeout: int,config:configread):
		self.head = None
		self.tail = None
		self.replicas = []
		self.olympusPrivate = olympusPrivate
		self.olympusPublic = olympusPublic
		self.clientPublic = clientPublic
		self.replicaPublicKeysList = []
		self.replicaPrivateKeysList = []
		self.isConfigurationValid = False
		self.failure = failures
		self.configuration = -1
		self.crypto = Crypto()
		self.listOfWedgeStatements = []
		self.numberOfWedgedResponses = 0
		self.lastCheckPointAccepted = None
		self.lastSlotNumberInPrevConfig = -1
		self.t = config.failure_num
		self.checkpt_interval = config.checkpt_interval
		self.crytographicHashProcessDict = dict()
		self.numberOfCaughtUpResponses = 0
		self.receivedRunningState = dict()
		self.reconfigurationSuccess = False
		self.numberOfInitHistResp = 0
		self.clients = clients
		self.olympus_timeout = 1
		self.replicaClientResultStDict = dict()
		self.resultShuttleResponse = 0
	
		
	def createNewReplica():
	
		reconfigSuccessful = False
		while(not reconfigSuccessful):
			if len(replicas) !=0 : 
				send(('kill'), to=replicas)
				
				
			replicas = new(rl.Replica, num=nReplicas)
			replicas = list(replicas)
			configuration = configuration + 1
			self.head = replicas[0]
			self.tail = replicas[nReplicas - 1]
			self.replicaPublicKeysList=[]
			self.replicaPrivateKeysList=[]
			for i in range(nReplicas):
				(private, public) = crypto.getSignedKey()
				self.replicaPrivateKeysList.append(private)
				self.replicaPublicKeysList.append(public)
			output('replica private keys')
			output(' %s' % (replicaPrivateKeysList,))
			output('replica public keys')
			output(' %s' % (replicaPublicKeysList,))
			setup(replicas, (self, State.PENDING.value, olympusPublic, clientPublic,
	                   replicaPublicKeysList, replicaPrivateKeysList, nonhead_timeout,lastSlotNumberInPrevConfig, self.t, self.checkpt_interval ))
			start(replicas)
			c = logical_clock()
			numberOfInitHistResp = 0
			for i in range(nReplicas):
				failcase = []
				if (configuration, i) in failure.keys():
					failcase = failure[(configuration, i)]
				send(('inithist', receivedRunningState, replicas, head, tail,
	                            i, c, configuration, failcase), to=replicas[i])
				output("Message inithist sent to replica %i" %
				       (i,), sep=str_exp, level=log_level)
			
			if await((self.numberOfInitHistResp == len(replicas))):
				output('Olympus received enough number of inithist_responses:%i.Setting configuration to valid' %
			       (numberOfInitHistResp,), sep=str_exp, level=log_level)
				self.isConfigurationValid = True
				output('Olympus sending configuration response to clients %s' %
			       (clients,), sep=str_exp, level=log_level)
				send(('configuration_response', replicas, head, tail, logical_clock(),self.replicaPublicKeysList,isConfigurationValid), to=clients)
				reconfigSuccessful = True
			
			elif timeout(3):
				output('Olympus: timeout out waiting inithist responses from replica. Sending inithist again'
				    , sep=str_exp, level=log_level)
			

			
	def receive(msg=('inithist_response', replica), from_=p):
		
		self.numberOfInitHistResp=self.numberOfInitHistResp + 1
		output('Olympus received inithist_response from replica: %s,numberOfInitHistResp:%i,t:%i' %
		       (p,self.numberOfInitHistResp,t), sep=str_exp, level=log_level)
		

	def run():
		output('Starting Olympus', sep=str_exp, level=log_level)
		createNewReplica()
		c = logical_clock()
		

		await(each(client in clients, has=some(received(('done', _client, _)))))
		output('olympus received done from all clients')
		output('olympus sending  done to all replicas')
		send(('done'), to=replicas)
		await(each(replica in replicas, has=some(received(('donereplica',_replica)))))
		output('olympus received  done from all replicas')
		send(('doneolympus',), to=parent())

		output('Olympus process is getting closed', sep=str_exp, level=log_level)

	
	def getPublicKey(index,type):
		if type == 'client' :
			return clientPublic[index]

		else:
			return replicaPublicKeysList[index]


	def receive(msg=('reconfiguration_request', signedReq,index,type), from_=p):
		msg = crypto.isSignatureVerified(getPublicKey(index,type),signedReq)
		output('Olympus received reconfiguration_request from:%s type:%s index:%i alreadyInProgress:%s' %(msg,type,index,not isConfigurationValid), sep = str_exp, level = log_level)
		if msg != None and isConfigurationValid:
			output('Reconfiguration Request Valid from:%s index:%i'%(type,index), sep = str_exp, level = log_level)
			self.isConfigurationValid = False
			output('Olympus sending configuration INVALID to all clients ', sep = str_exp, level = log_level)
			send(('getconfiguration_response',isConfigurationValid), to=clients)
			req = 'wedge'
			signedReq = crypto.sign(olympusPrivate, req)
			
			while(1):
				listOfWedgeStatements = []
				numberOfWedgedResponses = 0
				send(('wedge', signedReq), to=replicas)
				output('Olympus sent wedge requests to all replicas', sep = str_exp, level = log_level)
				
				if await((numberOfWedgedResponses >= t + 1)):
						
						output('Olympus received the quoram :%i of  wedged responses:%s'%(numberOfWedgedResponses,",".join(str(a) + ',' + str(b) + ',' + str(c) for (a,b,c) in listOfWedgeStatements)), sep = str_exp, level = log_level)
						
						listOfWedgeStatements.sort(key=lambda tup:-1*tup[0])
						output('olympus computing quoram of valid histories', sep = str_exp, level = log_level)
						start =0
						
						crytographicHashProcessDict = dict()
						numberOfCaughtUpResponses = 0
						receivedRunningState =None
						reconfigurationSuccess = False
						(isValid,quoram) = findConsistentHistories(listOfWedgeStatements)
						output('olympus found the  quoram:%s of valid histories'%(quoram,), sep = str_exp, level = log_level)
						i =0
						self.replicaClientResultStDict.clear()
						if(quoram is not None):
							while i < len(quoram):
								process = quoram[i][0]
								diff = quoram[i][1]
								signedReq = crypto.sign(olympusPrivate, diff)
								output('olympus sending the catch_up message to replica:%s'%(process,), sep = str_exp, level = log_level)
								send(('catch_up', signedReq), to=process)
								i = i+1
							
							output('olympus waiting for the caughtUp responses from replicas', sep = str_exp, level = log_level)
							if await(numberOfCaughtUpResponses >= t + 1):
								output('olympus received quoram of caughtUp responses from replicas', sep = str_exp, level = log_level)
								if(len(crytographicHashProcessDict) == 1):
									output('all the caughtUp responses have single hash key', sep = str_exp, level = log_level)
									i=0
									while i < len(quoram):
										output('sending out get_running_state message to  process:%s'%(quoram[i][0],), sep = str_exp, level = log_level)
										send(('get_running_state'), to=quoram[i][0])
										
										if(await(receivedRunningState is not None)):
											output('received running_state message from process:%s'%(quoram[i][0],), sep = str_exp, level = log_level)
											key = list(crytographicHashProcessDict.keys())[0]
											if crypto.getHash(receivedRunningState) == key:
												output('running state hashes matched. Accepting the running state', sep = str_exp, level = log_level)
												sendResultShuttleToClients()
												reconfigurationSuccess = True
												break
										elif timeout(self.olympus_timeout):
											i = i+1
									
										
							if reconfigurationSuccess:
								break
							# else:
							# 	output('Need to find another quoram', sep = str_exp, level = log_level)
								
							# 	output('Removing the hash corresponding to the process with minimum number of count', sep = str_exp, level = log_level)
							# 	minimumLen = 99999;
							# 	processToBeRemoved = [];
							# 	for (k,v) in crytographicHashProcessDict.items():
							# 		if len(v) < minimumLen:
							# 			processToBeRemoved = v
									
								
							# 	processToBeRemovedSet = set(processToBeRemoved)
							# 	listOfWedgeStatementsNew = []
							# 	for wedgeSt in listOfWedgeStatements:
							# 		if not wedgeSt[1] in processToBeRemovedSet:
							# 			listOfWedgeStatementsNew.append(wedgeSt)
										
							# 	listOfWedgeStatements = listOfWedgeStatementsNew


			createNewReplica()

		else:
			if msg is None :
				output('Reconfiguration Request not signed by correct process', sep = str_exp, level = log_level)
			else:
				output('Reconfiguration already in progress', sep = str_exp, level = log_level)

	def findLastSlot(wedgeSt):
		lastSlotFromCheckPoint = -1
		if wedgeSt.checkpoint is not None:
			lastSlotFromCheckPoint = wedgeSt.checkpoint.checkpointSlot

		histories = wedgeSt.slotOperationHist
		maxSlot =-1
		for (k,v) in histories.items():
			if(k > maxSlot):

				maxSlot = k

		if(lastSlotFromCheckPoint > maxSlot):
			return lastSlotFromCheckPoint
		else:
			return maxSlot
	
	def sendResultShuttleToClients():
		output("olympus creating result shuttle for clients")
		sendShuttle = False
		sendShuttleNum = 0
		for i in range(len(clientPublic)):
			resultProof = ResultProof([],'',0)
			for j in range(len(self.replicaPublicKeysList)):
				if j in self.replicaClientResultStDict:
					resultStDict = self.replicaClientResultStDict[j]
					if i in resultStDict:
						sendShuttle = True
						(result,resultSt) = resultStDict[i]
						resultProof.operationName = resultSt.operationName
						resultProof.operationId = resultSt.operationId
						resultProof.addStatement(resultSt)
						output("Result statement is %s for replica:%i client:%i" % (resultSt,j,i))

			if (sendShuttle == True) and (len(resultProof.getlistOfResultSt()) >= (self.t+1)) :
				sendShuttleNum = sendShuttleNum + 1
				output("Olympus Sending result shuttle to client %i, %s " % (i, str(clients[i])))					
				send(('client_operation_response', resultProof.operationName, resultProof.operationId,
					result, resultProof, '', 'olympus'), to=clients[i])
		
		if await((self.resultShuttleResponse == sendShuttleNum)):
			self.resultShuttleResponse = 0	

			
	def findConsistentHistories(sortedByLongestHistory):
		
		start = 0
		while(start < len(sortedByLongestHistory)):
			
			lh = sortedByLongestHistory[start]
			remaining = sortedByLongestHistory[start+1:]
			numberOfConsistentHistoriesFound = 1
			lastCheckPointAccepted = lh[2].checkpoint
			lastSlotNumberInPrevConfig =  findLastSlot(lh[2])
			res = []
			res.append((lh[1],dict()))
			i =0
			
			while (numberOfConsistentHistoriesFound < t+1 and i < len(remaining)) :
				curList = remaining[i]
				if len(curList[2].slotOperationHist) == 0:
					numberOfConsistentHistoriesFound =numberOfConsistentHistoriesFound + 1
					diff = { k : lh[2].slotOperationHist[k] for k in set(lh[2].slotOperationHist) - set(curList[2].slotOperationHist) }
					res.append((curList[1],diff))

				else :
					isConsistent = True
					for (slot,currentClientOp) in curList[2].slotOperationHist.items():
						clientOpInLH = lh[2].slotOperationHist[slot]
					
						if clientOpInLH is not None:
							
							if (not (currentClientOp.operationName == clientOpInLH.operationName) and (currentClientOp.operationId == clientOpInLH.operationId)) :
								isConsistent = False
								break
								
						else:
							isConsistent = False
							break
					
					if isConsistent:
						numberOfConsistentHistoriesFound =numberOfConsistentHistoriesFound + 1	
						diff = { k : lh[2].slotOperationHist[k] for k in set(lh[2].slotOperationHist) - set(curList[2].slotOperationHist) }
						res.append((curList[1],diff))
				i = i+1
			
			if numberOfConsistentHistoriesFound >= t+1:
				return (True,res)
			else:
				start =start + 1
				
		return (False,None)
	
	def receive(msg=('caught_up', caughtUp,signedResultStDict,index,type), from_=p):
	
		msg = crypto.isSignatureVerified(getPublicKey(index,type),caughtUp)
		resultStDict = crypto.isSignatureVerified(getPublicKey(index,type),signedResultStDict)
		
		if msg != None:
			output('Olympus received caughtUp message containing runningStateHash :%s from replica:%s'%(msg,index,), sep = str_exp, level = log_level)
			if msg in crytographicHashProcessDict:
				crytographicHashProcessDict[msg].append(p)
			else:
				crytographicHashProcessDict[msg] = [p]
			self.replicaClientResultStDict[index] = resultStDict

			numberOfCaughtUpResponses = numberOfCaughtUpResponses +1
		else:
			output('caughtUp not signed by correct replica', sep = str_exp, level = log_level)
			
	def receive(msg=('running_state', runningState,index,type), from_=p):
	
		msg = crypto.isSignatureVerified(getPublicKey(index,type),runningState)
		if msg != None:
			output('Olympus received runningState:%s from replica:%s'%(msg,index,), sep = str_exp, level = log_level)
			
			receivedRunningState = msg

		else:
			output('runningState not signed by correct replica', sep = str_exp, level = log_level)
	
	def receive(msg=('wedged', wedgeSt,index,type), from_=p):
	
		msg = crypto.isSignatureVerified(getPublicKey(index,type),wedgeSt)
		if msg != None:
	
			output('Olympus received wedgeStatement:%s from replica:%s'%(msg,index,), sep = str_exp, level = log_level)
			histLen = 0
			if msg.slotOperationHist is not None:
				histLen = len(msg.slotOperationHist)
			
			listOfWedgeStatements.append((histLen,p,msg))
			numberOfWedgedResponses = numberOfWedgedResponses +1
		else:
			output('WedgeStatement not signed by correct replica', sep = str_exp, level = log_level)
			
	def receive(msg=('result_shuttle_response', clientNumber), from_=client):
		output('Olympus received resultSuttle from Client:%i'%(clientNumber), sep = str_exp, level = log_level)
		self.resultShuttleResponse = self.resultShuttleResponse + 1
