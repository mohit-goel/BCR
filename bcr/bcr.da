import sys
config(channel is {fifo, reliable}, clock is lamport)
from enum import Enum
import time
import nacl.encoding
import nacl.signing
from OrderProof import OrderProof
from OrderStatement import OrderStatement
from Crypto import Crypto
from State import State
from Validations import Validations
from ResultProof import ResultProof
from ResultStatement import ResultStatement
from Shuttle import Shuttle
from ReplicaHistory import ReplicaHistory
import pickle
from configread import configread
from TestCases import TestCases
from Operation import Operation
str_exp = ','
log_level = 20
cl = import_da('client')
ol = import_da('olympus')
rl = import_da('replica')


def main():
    start_time = time.time()
    if len(sys.argv) > 1:
        config = configread(sys.argv[1])
        output('configuration parameters are read from file')

    nclients = config.num_client
    #nReplicas = 2
    nReplicas = 2 * (config.failure_num) + 1
    config(clock='Lamport')
    crypto = Crypto()
    (olympusPrivate, olympusPublic) = crypto.getSignedKey()
    clientPrivate = []
    clientPublic = []

    for i in range(nclients):
        (private, public) = crypto.getSignedKey()
        clientPrivate.append(private)
        clientPublic.append(public)

    clients = new(cl.Client, num=nclients, at='ClientNode')
    clients = list(clients)
    masterDict = dict()
    testCases = TestCases(config.test_case_name, masterDict)

    olympus = new(ol.Olympus, num=1, at='OlympusNode')
    for i in range(nclients):
        masterDict = dict()
        if config.test_case_name == 'stresstest':
            work = config.workload[i]
            for load in work:
                operation = Operation(load.action, load.key, load.value)
                operation.performOperation(masterDict)
            testCases = TestCases(config.test_case_name, masterDict)

        setup(clients[i], (olympus, i, clientPrivate[i], olympusPublic,
                           config.workload[i], config.failure_num, testCases, config.client_timeout))

    setup(olympus, (nReplicas, clients, olympusPrivate, olympusPublic, clientPublic,
                    config.failure, config.nonhead_timeout, config))
    start(olympus)
    start(clients)

    await(each(client in clients, has=some(received(('done', _client, _, _)))))
    output('master receiveded done from all clients',
           sep=str_exp, level=log_level)
    send(('done',), to=clients)
    output('master acknowledge done to clients')
    output('master waiting  done from  olympus')
    #await(received(('done',), from_=olympus))

    await(some(received(('doneolympus',), from_=olympus)))
    output('master received  done from  olympus.Terminating')
    end_time = time.time()
    output('elapsed time (seconds):%i' %
           (end_time - start_time,), sep=str_exp, level=log_level)
