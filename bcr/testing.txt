Testing file for Byzantine Chain Replication Project:

Added configuration for test: failure action: change_privatekey()  -- Replica signs the OrderStatement & Result Statement in next forward Shuttle/ Backward Shuttle 
																	 with a different privatekey 
Description doesn't have to be correct when we run the config files again

CLIENT:
1. generate pseudorandom workload with good diversity using specified seed stress : Testcases- stresstest_1 stresstest_2
2. generate request sequence specified in config file : Testcases- All
3. handle result: check signatures and hashes in result proof : Testcases- test_10
4. timeout and send request to all replicas if timely response not received : Testcases- 
5. check that dictionary contains expected content at end of test case : Testcases- Done manually. Only Programatic in stresstest_1, stresstest_2

OLYMPUS:
1. create initial configuration: create keys, create, setup, and start processes

REPLICA:
dictionary object: support put, get, slice, append : Testcases- test_1 test_2 test_3 test_4 test_5 test_6 test_7
head: handle new request: assign slot, sign order stmt & result stmt, send shuttle : Testcases- All
head: handle retransmitted request as described in paper : Testcases- All cases after test_10 which contain failure case
handle shuttle: check validity of order proof (incl. signatures), add signed order statement and signed result statement, send updated shuttle
tail: send result to client; send result shuttle to predecessor - Almost all testcases
handle result shuttle: validate, save, and forward it : Testcase- test_10
non-head: handle request: send cached result, send error, or forward request : Testcase test_14 (for send cached result)
fault-injection: required triggers : failure case tests
fault-injection: required failures : failure case tests

CONFIGURATION FILES:
1. support configuration files specified in project.txt    configuration files have same name as test_case_name

To run Multi Host:
Commands:  (these are to be set while demo)
python3 -m da --logfile --logfilename logdirect/replica.log --logfilelevel info -n ReplicaNode --hostname 172.25.90.11 --peer 172.25.82.132 -D replica.da
python3 -m da --logfile --logfilename logdirect/client.log --logfilelevel info  -n ClientNode --hostname 172.25.82.132 --peer 172.25.90.11  -D client.da
python3 -m da --logfile --logfilename logdirect/olympus.log --logfilelevel info  -n OlympusNode --hostname 172.25.82.132  --peer 172.25.90.11 -D olympus.da

python3 -m da --logfile --logfilename logdirect/master.log --logfilelevel info  -n MasterNode --hostname 172.25.82.132 --peer 172.25.90.11 bcr.da


If you need to run test cases, Bring testcases to main file:

1. test_1: python3 -m da --logfile --logfilename test_1_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_1.txt
test_case_name = test_1
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. 
Dict States: 1. { 'movie': ['star'] }
Result: OK

2. test_2: python3 -m da --logfile --logfilename test_2_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_2.txt
test_case_name = test_2
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is empty string because key doesn't exist.
Dict States: {} , Result: ''

3. test_3: python3 -m da --logfile --logfilename test_3_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_3.txt 
test_case_name = test_3
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict State: {}  , Result: fail


4.test_4: python3 -m da --logfile --logfilename test_4_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_4.txt 
test_case_name = test_4
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict State: {}  Results: fail

5. test_5 : python3 -m da --logfile --logfilename test_5_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_5.txt
test_case_name = test_5
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie',' wars'); get('movie')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle.
Dict: 'movie': ['star wars'] , Result: OK, OK, ['star wars']

6. test_6: python3 -m da --logfile --logfilename test_6_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_6.txt
test_case_name = test_6
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie',' wars'); slice('movie','8:10')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. 3rd Result is fail because index out of range
Dict: 'movie': ['star wars'] , Result: OK, OK, fail

7. test_7: python3 -m da --logfile --logfilename test_7_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_7.txt
test_case_name = test_7
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Both results fail because key doesnt exist
Dict: {'movie' : 'tar'} , Result: OK, OK

8. test_8: python3 -m da --logfile --logfilename test_8_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_8.txt
test_case_name = test_8
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 5 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie':'star' , Result: OK

9. test_9: python3 -m da --logfile --logfilename test_9_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_9.txt
test_case_name = test_9
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 2 client, 3 replicas. Clients sends operation. Head receives operation and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and other replicas. Client verifies result shuttle. Result is fail because key doesn't exist.
Dict: {'movie':'star'}/{'movie':'stars'} , client 0 Result: OK client 1 Result: OK

10. test_10: python3 -m da --logfile --logfilename test_10_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_10.txt
test_case_name = test_10
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
failures[0,2] = shuttle(0,0), change_privatekey()

Description:  Failure case to verify signatures at client and replicas. Here when replica:2 receives forward_shuttle for message:0 of client:0, 
			 it changes its private key and signs Order Statement and Result Statement with this key. 
			 It then transmits this result proof to client and as Backward_shuttle. Previous replica validates sign and sends reconfiguration request.
			 Client retransmits 


11. test_11: python3 -m da --logfile --logfilename test_11_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_11.txt

test_case_name = test_11
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars')
failures[0,0] = client_request(0,0), change_operation()

Description: 1 client, 3 replicas. Clients send operations. When Head receives operation client_request(0,0) it modifies forward shuttle and sends it. 
Replica:1 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:1 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus


12. test_12: python3 -m da --logfile --logfilename test_12_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_12.txt
test_case_name = test_12
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars'); get('movie')
failures[0,1] = shuttle(0,0), change_operation()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

13. test_13: python3 -m da --logfile --logfilename test_13_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_13.txt
test_case_name = test_13
t = 2
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,0), change_result()
failures[0,2] = result_shuttle(0,0), change_result()

Description: 2 client, 5 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus


14. test_14: python3 -m da --logfile --logfilename test_14_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_14.txt

test_case_name = test_14
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars'); slice('movie','1:4')
failures[0,0] = forwarded_request(0,0), change_result()
failures[0,2] = shuttle(0,0), drop_result_stmt()

Description: 1 client, 3 replicas. Clients send operations. When Head receives operation client_request(0,0) it modifies forward shuttle and sends it. 
Replica:1 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:1 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus


15. test_15: python3 -m da --logfile --logfilename test_15_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_15.txt
test_case_name = test_15
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = put('movie','stars'); get('movie')
failures[0,1] = shuttle(0,2), change_operation()
failures[0,2] = result_shuttle(0,0), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

16. test_16: python3 -m da --logfile --logfilename test_16_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_16.txt
test_case_name = test_16
t = 1
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,0), change_result()
failures[0,2] = result_shuttle(0,0), drop_result_stmt()
failures[0,0] = client_request(0,1), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

17. test_17: python3 -m da --logfile --logfilename test_17_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_17.txt
test_case_name = test_17
t = 1
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,2), change_result()
failures[0,2] = shuttle(1,0), drop_result_stmt()
failures[0,0] = client_request(0,1), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

18. test_18: python3 -m da --logfile --logfilename test_18_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_18.txt
test_case_name = test_18
t = 1
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,2), change_result()
failures[0,2] = result_shuttle(1,1), drop_result_stmt()
failures[0,0] = client_request(0,1), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

19. test_19: python3 -m da --logfile --logfilename test_19_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_19.txt
test_case_name = test_19
t = 1
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4'); put('movie','stars')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,1), change_result()
failures[0,2] = shuttle(0,2), drop_result_stmt()
failures[0,0] = forwarded_request(0,1), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

20. test_20: python3 -m da --logfile --logfilename test_20_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_20.txt
test_case_name = test_20
t = 1
num_client = 2
client_timeout = 4000
head_timeout = 4000
nonhead_timeout = 4000
workload[0] = put('movie','star'); slice('movie','1:4')
workload[1] = get('movie'); put('movie','stars')
failures[0,1] = shuttle(0,2), change_result()
failures[0,2] = result_shuttle(0,0), drop_result_stmt()
failures[0,0] = client_request(0,1), drop_result_stmt()

Description: 2 client, 3 replicas. Client sends operation. When Replica 1 receives Forward Shuttle:0 for Client:0, it modifies forward shuttle and sends it. 
Replica:2 detects fault and sends reconfiguration request. If client 1 sends before client 0, then its shuttle passes through all replicas and gets result shuttle. 
If client 0 sends before client 1, then replica:2 doesn't accept any more requests from any client because slots would not be continuous. 
Both clients would retransmit request and time-out and then send reconfiguration request to olympus

21. test_21: python3 -m da --logfile --logfilename test_21_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da test_21.txt
test_case_name = test_21
t = 1
num_client = 1
client_timeout = 10000
head_timeout = 10000
nonhead_timeout = 10000
workload[0] = put('movie','star'); slice('movie','1:4')
#workload[1] = get('movie'); put('movie','stars')
failures[0,0] = client_request(0,0),remove_operationhistory()
failures[0,2] = shuttle(0,0), drop_result_stmt()
#failures[0,0] = client_request(0,1), drop_result_stmt()

Description:  Protocol initiates again


22. stresstest_1: python3 -m da --logfile --logfilename stresstest_1_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da stresstest_1.txt
test_case_name = stresstest_1
t = 1
pseudorandom_workload[0] = put('movie','star');append('movie','wars');get('movie');slice('movie','1:3');put('movie','star1');append('movie','wars1');get('movie');slice('movie','1:2');append('movie','redemption')
pseudorandom_workload[1] = put('movie1','star');append('movie1','wars');get('movie1');slice('movie1','1:3');put('movie11','star1');append('movie11','wars1');get('movie1');slice('movie1','1:2');append('movie11','star1')
pseudorandom_workload[2] = put('movie2','star');append('movie2','wars');get('movie2');slice('movie2','1:3');put('movie21','star1');append('movie21','wars1');get('movie2');slice('movie2','1:2');append('movie21','star1')
pseudorandom_workload[3] = put('movie3','star');append('movie3','wars');get('movie3');slice('movie3','1:3');put('movie31','star1');append('movie31','wars1');get('movie3');slice('movie3','1:2');append('movie31','star1')
pseudorandom_workload[4] = put('movie4','star');append('movie4','wars');get('movie4');slice('movie4','1:3');put('movie41','star1');append('movie41','wars1');get('movie4');slice('movie4','1:2');append('movie41','star1')
pseudorandom_workload[5] = put('movie5','star');append('movie5','wars');get('movie5');slice('movie5','1:3');put('movie51','star1');append('movie51','wars1');get('movie5');slice('movie5','1:2');append('movie51','star1')
pseudorandom_workload[6] = put('movie6','star');append('movie6','wars');get('movie6');slice('movie6','1:3');put('movie61','star1');append('movie61','wars1');get('movie6');slice('movie6','1:2');append('movie61','star1')
pseudorandom_workload[7] = put('movie7','star');append('movie7','wars');get('movie7');slice('movie7','1:3');put('movie71','star1');append('movie71','wars1');get('movie7');slice('movie7','1:2');append('movie71','star1')
pseudorandom_workload[8] = put('movie8','star');append('movie8','wars');get('movie8');slice('movie8','1:3');put('movie81','star1');append('movie81','wars1');get('movie8');slice('movie8','1:2');append('movie81','star1')
pseudorandom_workload[9] = put('movie9','star');append('movie9','wars');get('movie9');slice('movie9','1:3');put('movie91','star1');append('movie91','wars1');get('movie9');slice('movie9','1:2');append('movie91','star1')
num_client = 10
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000

workload[0] = pseudorandom(233,100)
workload[1] = pseudorandom(234,100)
workload[2] = pseudorandom(235,100)
workload[3] = pseudorandom(236,100)
workload[4] = pseudorandom(237,100)
workload[5] = pseudorandom(238,100)
workload[6] = pseudorandom(239,100)
workload[7] = pseudorandom(240,100)
workload[8] = pseudorandom(241,100)
workload[9] = pseudorandom(242,100)

Description: stress case without failures


23. stresstest_2: python3 -m da --logfile --logfilename stresstest_2_log.txt  --logfilelevel 'info' --message-buffer-size 90000 bcr.da stresstest_2.txt
test_case_name = stresstest_2
t = 1
pseudorandom_workload[0] = put('movie','star');append('movie','wars');get('movie');slice('movie','1:3');put('movie','star1');append('movie','wars1');get('movie');slice('movie','1:2');append('movie','redemption')
pseudorandom_workload[1] = put('movie1','star');append('movie1','wars');get('movie1');slice('movie1','1:3');put('movie11','star1');append('movie11','wars1');get('movie1');slice('movie1','1:2');append('movie11','star1')
pseudorandom_workload[2] = put('movie2','star');append('movie2','wars');get('movie2');slice('movie2','1:3');put('movie21','star1');append('movie21','wars1');get('movie2');slice('movie2','1:2');append('movie21','star1')
pseudorandom_workload[3] = put('movie3','star');append('movie3','wars');get('movie3');slice('movie3','1:3');put('movie31','star1');append('movie31','wars1');get('movie3');slice('movie3','1:2');append('movie31','star1')
pseudorandom_workload[4] = put('movie4','star');append('movie4','wars');get('movie4');slice('movie4','1:3');put('movie41','star1');append('movie41','wars1');get('movie4');slice('movie4','1:2');append('movie41','star1')
pseudorandom_workload[5] = put('movie5','star');append('movie5','wars');get('movie5');slice('movie5','1:3');put('movie51','star1');append('movie51','wars1');get('movie5');slice('movie5','1:2');append('movie51','star1')
pseudorandom_workload[6] = put('movie6','star');append('movie6','wars');get('movie6');slice('movie6','1:3');put('movie61','star1');append('movie61','wars1');get('movie6');slice('movie6','1:2');append('movie61','star1')
pseudorandom_workload[7] = put('movie7','star');append('movie7','wars');get('movie7');slice('movie7','1:3');put('movie71','star1');append('movie71','wars1');get('movie7');slice('movie7','1:2');append('movie71','star1')
pseudorandom_workload[8] = put('movie8','star');append('movie8','wars');get('movie8');slice('movie8','1:3');put('movie81','star1');append('movie81','wars1');get('movie8');slice('movie8','1:2');append('movie81','star1')
pseudorandom_workload[9] = put('movie9','star');append('movie9','wars');get('movie9');slice('movie9','1:3');put('movie91','star1');append('movie91','wars1');get('movie9');slice('movie9','1:2');append('movie91','star1')
num_client = 10
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000

workload[0] = pseudorandom(233,100)
workload[1] = pseudorandom(234,100)
workload[2] = pseudorandom(235,100)
workload[3] = pseudorandom(236,100)
workload[4] = pseudorandom(237,100)
workload[5] = pseudorandom(238,100)
workload[6] = pseudorandom(239,100)
workload[7] = pseudorandom(240,100)
workload[8] = pseudorandom(241,100)
workload[9] = pseudorandom(242,100)
failures[0,0] = client_request(0,0), change_operation()

Description: stress case with failures




